/* esm.sh - esbuild bundle(@radix-ui/react-switch@1.0.3) denonext production */
/* This is created from './Switch.tsx'  */
import*as e from"../../../../../../esm.sh/preact@10.19.6/compat.js";
import{composeEventHandlers as x}from"../../../../../../esm.sh/_@radix-ui/primitive@1.0.1.js";
import{createContextScope as T}from"../../../../../../esm.sh/v132/_@radix-ui/react-context@1.0.1.js";
import{useControllableState as _}from"../../../../../../esm.sh/v132/_@radix-ui/react-use-controllable-state@1.0.1.js";
import{usePrevious as B}from"../../../../../../esm.sh/v132/_@radix-ui/react-use-previous@1.0.1.js";
import{useSize as H}from"../../../../../../esm.sh/v132/_@radix-ui/react-use-size@1.0.1.js";
import{Primitive as P}from"../../../../../../esm.sh/v132/_@radix-ui/react-primitive@1.0.3.js";
const b="Switch",[I,M]=T(b),[N,q]=I(b),k=e.forwardRef((t,d)=>{const{__scopeSwitch:o,name:c,checked:n,defaultChecked:u,required:a,disabled:r,value:i="on",onCheckedChange:f,...w}=t,[s,h]=e.useState(null),l=e.useRef(null),m=e.useRef(!1),C=s?!!s.closest("form"):!0,[p=!1,R]=_({prop:n,defaultProp:u,onChange:f});return e.useEffect(()=>{l.current&&h(l.current)},[l.current]),e.createElement(N,{scope:o,checked:p,disabled:r},e.createElement(P.button,{type:"button",role:"switch","aria-checked":p,"aria-required":a,"data-state":y(p),"data-disabled":r?"":void 0,disabled:r,value:i,...w,ref:l,onClick:x(t.onClick,E=>{R(g=>!g),C&&(m.current=E.isPropagationStopped(),m.current||E.stopPropagation())})}),C&&e.createElement(z,{control:s,bubbles:!m.current,name:c,value:i,checked:p,required:a,disabled:r,style:{transform:"translateX(-100%)"}}))});k.displayName=b;const v="SwitchThumb",S=e.forwardRef((t,d)=>{const{__scopeSwitch:o,...c}=t,n=q(v,o);return e.createElement(P.span,{"data-state":y(n.checked),"data-disabled":n.disabled?"":void 0,...c,ref:d})});S.displayName=v;const z=t=>{const{control:d,checked:o,bubbles:c=!0,...n}=t,u=e.useRef(null),a=B(o),r=H(d);return e.useEffect(()=>{const i=u.current,f=window.HTMLInputElement.prototype,s=Object.getOwnPropertyDescriptor(f,"checked").set;if(a!==o&&s){const h=new Event("click",{bubbles:c});s.call(i,o),i.dispatchEvent(h)}},[a,o,c]),e.createElement("input",{type:"checkbox","aria-hidden":!0,defaultChecked:o,...n,tabIndex:-1,ref:u,style:{...t.style,...r,position:"absolute",pointerEvents:"none",opacity:0,margin:0}})};function y(t){return t?"checked":"unchecked"}const A=k,O=S;export{M as createSwitchScope,k as Switch,S as SwitchThumb,A as Root,O as Thumb};
